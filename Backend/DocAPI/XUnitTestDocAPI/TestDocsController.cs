using Xunit;
using DocAPI.Models;
using DocAPI.Controllers;
using Microsoft.AspNetCore.Mvc;
using System.IO;
using System.Threading;

namespace XUnitTestDocAPI
{
    public class TestDocsController
    {
        //Encoded Docx
        const string postBase64 =
            "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";
        [Fact]
        public void GetAll_ShouldReturnNoContentResult()
        {
            
            var controller = new DocsController(new DocumentContext());
            var result = (ObjectResult)controller.Get();
            Assert.Equal(0, result.Value);
        }

        [Fact]
        public void GetNotExisiting_ShouldReturn404()
        {
            var controller = new DocsController(new DocumentContext());
            var result = (StatusCodeResult)controller.Get(9);
            Assert.Equal(404, result.StatusCode);
        }

        [Fact]
        public void Post_ShouldCreateDocument()
        {
            var controller = new DocsController(new DocumentContext());

            ContentResult result = (ContentResult)controller.Create(new Document(postBase64));

            //Gets id from the newly created document
            var id = int.Parse(result.Content);

            //Sleep while another thread is doing the work
            Thread.Sleep(10000);
            //Gets content of Get Response
            var content = (ObjectResult)controller.Get(id);
            var document = (Document)content.Value;
            
            //Assure the base64 content was correct transfered
            Assert.Equal(document.Content, postBase64);
        }
        [Fact]
        public void PostInvalid_ShouldReturn501()
        {
            var controller = new DocsController(new DocumentContext());
            ContentResult result =
                (ContentResult)controller.Create(new Document("asd"));
            var id = int.Parse(result.Content);
            Thread.Sleep(2000);
            var getResult = (StatusCodeResult)controller.Get(id);
            
            Assert.Equal(501, getResult.StatusCode);
        }

        [Fact]
        public void Delete_CreatedDocument()
        {
            var controller = new DocsController(new DocumentContext());

            ContentResult result =
                (ContentResult)controller.Create(new Document(postBase64));

            //Gets id from the newly created document
            int id = int.Parse(result.Content);

            //Checks if the document was added
            var getResult1 = (ObjectResult)controller.Get();
            Assert.Equal(1, getResult1.Value);

            //Check swagger compliance
            var  msg = (NoContentResult)controller.Delete(id);
            Assert.Equal(204, msg.StatusCode);

            //Checks if the document was removed
            var getResult0 = (ObjectResult)controller.Get();
            Assert.Equal(0, getResult0.Value);
        }
    }
}
